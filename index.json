[{"content":"手动上传 github 准备 安装软件 1 sudo pacman -Sy --needed hugo git 注册 GitHub 并创建仓库 Github 注册 创建一个与你用户名相同的仓库，比如: 1 \u0026lt;Github用户名\u0026gt;.github.io Hugo 博客项目 创建源代码 在本地找个位置存储 源代码\n1 2 3 4 5 6 7 8 9 10 11 # 创建文件夹 mkdir blog # 打开文件夹 cd blog # 使用 hugo 创建文件夹(此处是您的代码仓库) hugo new site \u0026lt;你的文件夹名\u0026gt; #打开你的文件夹 cd \u0026lt;你的文件夹名\u0026gt; 添加主题 (此处使用 主题 - PaperMod 作为例子)\n在当前 “根目录” 文件夹目录下 1 2 3 4 5 6 # git初始化本地仓库 git init # 将 PaperMod下载到本地 git submodule add \\\\ \u0026lt;https://github.com/adityatelange/hugo-PaperMod.git\u0026gt; \\\\ themes/PaperMod 如果 git submodule add 不行，则可以网页浏览到 PaperMod主页点击 \u0026lt;\u0026gt;Code 下载 zip 文件，压缩文件将文件名改为 PaperMod 并复制粘贴到_当前themes目录_下即可。 配置 hugo.toml 将下面代码复制粘贴到hugo.toml下。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 baseURL: \u0026#39;https://\u0026lt;username\u0026gt;.github.io/\u0026#39; defaultContentLanguage: zh # 主语言 languages: zh: languageName: 中文 languageCode: zh-cn weight: 1 title: \u0026#39;hansel 的垃圾站\u0026#39; theme: \u0026#39;PaperMod\u0026#39; pagination: pagerSize: 9 # 首页文章显示个数 summaryLength: 999999 # 首页文章摘要字数 hasCJKLanguage: true rssLimit: 10 # 限制 rss 输出的数量 markup: highlight: noClasses: false style: catppuccin-frappe goldmark: renderer: unsafe: true tableOfContents: startLevel: 2 # 从 h2 开始 endLevel: 3 # 到 h4 结束 ordered: false # 生成 ul 而不是 ol outputs: home: - HTML - RSS - JSON params: showtoc: true # 让文章页出现目录 tocopen: true # 默认展开，false 则折叠 DateFormat: \u0026#34;2006年01月02日\u0026#34; defaultTheme: \u0026#34;auto\u0026#34; homeInfoParams: Title: \u0026#34;你好，我是 hansel \u0026#34; Content: \u0026#34;欢迎来到我的博客主页 \u0026#34; menu: main: - name: \u0026#34;个人\u0026#34; url: \u0026#34;/posts\u0026#34; weight: 1 - name: \u0026#34;归档\u0026#34; url: \u0026#34;/archives\u0026#34; weight: 2 - name: \u0026#34;学习\u0026#34; url: \u0026#34;/study\u0026#34; weight: 3 baseURL: 访问你个人网页的链接; url: 链接的是当前目录下content下的文件/文件夹; weight: 表示网页部署位置 params.showtoc 和 params.tocopen 开启文章的目录 写第一篇文章 1 2 # 在当前 根目录 下输入 hugo new content/posts/hello-hugo.md 使用hugo new会链接脚本创建markdown的上述链接: 1 2 3 4 5 +++ date = \u0026#39;2025-09-15T09:49:33+08:00\u0026#39; draft = true title = \u0026#39;Hello Hugo\u0026#39; +++ 在当前md下输入\u0026lt;您的内容\u0026gt;: 1 2 3 4 5 6 7 +++ date = \u0026#39;2025-09-15T09:49:33+08:00\u0026#39; draft = true title = \u0026#39;Hello Hugo\u0026#39; +++ 这是我的第一篇文章！我正在学习 Hugo 😊 本地预览网站 \u0026amp; 📁 构建 public/ 文件夹 1 2 3 4 5 # 当前根目录下输入 hugo server -D # 使用浏览器打开，查看效果 \u0026lt;http://localhost:1313\u0026gt; 当你想部署网站时，运行： 1 hugo 这条命令会生成 **public/** 文件夹，它包含了 构建好的静态网页内容，可以直接部署。 你部署到网页上的内容应该是在 public/ 下 1 2 3 4 5 6 7 8 9 10 # 进入 public/ 目录并初始化 Git cd public git init git remote add origin \u0026lt;https://github.com/你的用户名/你的用户名.github.io.git\u0026gt; git checkout -b gh-pages # 提交构建结果并推送到 gh-pages 分支 git add . git commit -m \u0026#34;手动部署 Hugo 页面\u0026#34; git push -f origin gh-pages 在 GitHub 设置 Pages 分支 打开你的 GitHub 仓库 点击菜单栏 Settings → Pages 在 Source 选项中选择： 分支：gh-pages 目录：/(root) 保存并等待 GitHub 自动生成网页（几分钟内） 总结 每次想新写内容直接 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 # 文件存储在content下 hugo new \u0026lt;你的文件路径\u0026gt; # 本地查看 hugo server -D # 浏览器查看 \u0026lt;http://localhost:1313\u0026gt; # 之后直接在根目录下,注意你当前的分支应该是 main ## 查看分支 git branch git add . git commit -m \u0026#34;你的日志\u0026#34; git push origin main 此后你写的 deploy.yml 会在 actions 下自动部署网页，无需在进入到public下再次推送静态网页 您的网页源代码在 main 分支下，静态部署网页代码在 pulic 文件夹下(也是访问您网页的代码内容) 使用 Obsidian + Enveloppe 插件自动上传github 先按照 Hugo \u0026gt; 手动上传 github 部分使用 hugo 初始化一个网站，并配置好你喜欢的主题，并发布到 Github 上。\nEnveloppe 插件 给 Obsidian 安装 Enveloppe 插件，该插件的作用是将 Obsidian 中的文章和本地附件上传到 Github 仓库，上传前可以指定文件目录、自定义内容替换等操作。\n仓库配置 注意：\n生成的 token 不要放在 Github 的公共仓库，检测到 token 就会失效。 通过 here 生成 token 时的 链接 会自动带上权限，你只需要设置名字和过期时间即可。 插件配置 使用 Obsidian 免费建个人博客 | PrintLove\n前往 miaogaolin/obsidian-github-publisher-hugo 拷贝 settings.json 设置，然后粘贴导入插件：\nObsidian 文章模板 配置是和 Hugo 强关联的，如果你用了其它工具，就根据自己的情况调整。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 --- title: \u0026#34;{{title}}\u0026#34; date: \u0026#34;{{date}}\u0026#34; tags: - blog slug: \u0026#34;{{time}}\u0026#34; share: true description: \u0026#34;\u0026#34; series: lastmod: author: hansel dir: posts cover.image: \u0026#34;\u0026#34; --- data : 创建时间，我这边生成的格式是 YYYY-MM-DDTHH:mm:ss slug : 自定义 URL 中文章的访问名称，默认用时间戳填充模板格式为X share: 配合 Enveloppe插件用的,true表示 obsidian 的文章可以发布 description: 文章的描述 SEO 优化，为空时默认会截取文章前面的内容 series: \u0026quot;系列\u0026quot;: 系列文章 lastmod: 文章最后更新的时间 author: 作者名称 dir 属性：设置文章的上传目录，如果不设置，则以 content/ 为根目录。dir:\u0026quot;posts\u0026quot; 表示上传到 content/posts 目录，也只有在 posts 目录下才会在网页上直接显示。 cover.image：设置封面，在使用 Enveloppe 后会转化为二级 key。 发布 Obsidian 命令 先使用命令行发布当前文章，输入 active，然后选择 Enveloppe 即可，记着文章的 share 属性要开启，即 true。\n如果你想上传多个 share 为 true 的文章，使用的命令为：\nRefresh published and upload new notes 将所有 share 为 true 且新更新的文章发布 Refresh all published notes 将所有 share 为 true 的文章都发布 菜单 当然插件的配置也支持菜单模式，配置前往：Plugin settings -\u0026gt; Menu。\n部署博客 部署到 GitHub Pages（使用 Actions 自动部署） 初始化 git 并推送到 GitHub 1 2 3 4 5 6 7 # 在根目录下 git init git add . git commit -m \u0026#34;first commit\u0026#34; git branch -M main git remote add origin git@github.com:你的用户名/你的用户名.github.io.git git push -u origin main ⚠️ 如果你使用的是 HTTPS，请把 git@github.com… 改为 [https://github.com/](\u0026lt;https://github.com/\u0026gt;)你的用户名/你的用户名.github.io.git\n添加部署工作流 创建文件 (在根目录下) .github/workflows/deploy.yml：(注意 .github 的文件夹也是自己创建的) 复制一下内容到 deploy.yml 下 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 name: Deploy Hugo site to GitHub Pages on: push: branches: [main] # 👈 每次推送到 main 分支就会自动部署 jobs: build: runs-on: ubuntu-latest steps: - name: Checkout code uses: actions/checkout@v4 with: submodules: true # 主题若用 submodule 需拉取 fetch-depth: 0 - name: Setup Hugo uses: peaceiris/actions-hugo@v3 with: hugo-version: latest extended: true - name: Build Hugo site run: hugo --minify - name: Deploy to GitHub Pages 🚀 uses: peaceiris/actions-gh-pages@v4 if: github.ref == \u0026#39;refs/heads/main\u0026#39; with: github_token: ${{ secrets.GITHUB_TOKEN }} publish_dir: ./public 在 GitHub 设置 Pages 分支 打开你的 GitHub 仓库 点击菜单栏 Settings → Pages 在 Source 选项中选择： 分支：gh-pages 目录：/(root) 保存并等待 GitHub 自动生成网页（几分钟内） [!tip] 注意\n必须给 GITHUB_TOKEN 写权限（ Settings → Actions → General → Read and write permissions）。 抄袭对象 [!tip] 参考\n使用Hugo 搭建博客并部署到 GitHub Pages | VSVnakers 主页 Notion-Hugo-Github博客系统一体化 - xfeng\u0026rsquo;s blog notion-hugo-blog：将Notion内容自动化生成Hugo网站 | Welcome to train.sh obsidian如何自动发布hugo博客 - 任意的Blog 使用 Obsidian 免费建个人博客 | PrintLove ","permalink":"https://jhxs.github.io/posts/1706/","summary":"\u003ch1 id=\"手动上传-github\"\u003e手动上传 github\u003c/h1\u003e\n\u003ch2 id=\"准备\"\u003e准备\u003c/h2\u003e\n\u003ch3 id=\"安装软件\"\u003e安装软件\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003esudo pacman -Sy --needed hugo git\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch3 id=\"注册-github-并创建仓库\"\u003e\u003cstrong\u003e注册 GitHub 并创建仓库\u003c/strong\u003e\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com\"\u003eGithub 注册\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e创建一个\u003cstrong\u003e与你用户名相同的仓库\u003c/strong\u003e，比如:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u0026lt;Github用户名\u0026gt;.github.io\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"hugo-博客项目\"\u003eHugo 博客项目\u003c/h2\u003e\n\u003ch3 id=\"创建源代码\"\u003e创建源代码\u003c/h3\u003e\n\u003cp\u003e在本地找个位置存储 \u003cstrong\u003e源代码\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 创建文件夹\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003emkdir blog\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 打开文件夹\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ecd\u003c/span\u003e blog\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 使用 hugo 创建文件夹(此处是您的代码仓库)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ehugo new site \u0026lt;你的文件夹名\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e#打开你的文件夹\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ecd\u003c/span\u003e \u0026lt;你的文件夹名\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch3 id=\"添加主题\"\u003e添加主题\u003c/h3\u003e\n\u003cblockquote\u003e\n\u003cp\u003e(此处使用 \u003cstrong\u003e主题\u003c/strong\u003e - \u003cstrong\u003ePaperMod\u003c/strong\u003e 作为例子)\u003c/p\u003e","title":"Hugo"},{"content":" [!tip] 插件列表\n用于Obsidian图片管理的4个插件 - 经验分享 - Obsidian 中文论坛 Image Converter Auto link title Enveloppe —— 将 Obsidian 中的文章和本地附件上传到 Github 仓库，上传前可以指定文件目录、自定义内容替换等操作。 ","permalink":"https://jhxs.github.io/posts/2106/","summary":"\u003cblockquote\u003e\n\u003cp\u003e[!tip] 插件列表\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://forum-zh.obsidian.md/t/topic/44910\"\u003e用于Obsidian图片管理的4个插件 - 经验分享 - Obsidian 中文论坛\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eImage Converter\u003c/li\u003e\n\u003cli\u003eAuto link title\u003c/li\u003e\n\u003cli\u003eEnveloppe —— 将 Obsidian 中的文章和本地附件上传到 Github 仓库，上传前可以指定文件目录、自定义内容替换等操作。\u003c/li\u003e\n\u003c/ul\u003e\u003c/blockquote\u003e","title":"Obsidian"},{"content":"配置C环境 [!important] https://www.cnblogs.com/duruofei/p/15674502.html\n安装Mingw 1 scoop install main/mingw 安装扩展 安装C/C++插件,扩展\u0026ndash;\u0026gt;搜索C/C++\u0026ndash;\u0026gt;安装。还有code runner插件 新建C源文件，并用vscode打开，点击调试→创建launch.json文件，依次选择C++(GDB/LLDB), 默认配置。此时会自动在当前目录下新建.vscode文件夹并生成lauch.json 将其中代码更改如下将光标放在标签上可以显示此标签的意义\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 { // 使用 IntelliSense 了解相关属性。 // 悬停以查看现有属性的描述。 // 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387 \u0026#34;version\u0026#34;: \u0026#34;0.2.0\u0026#34;, \u0026#34;configurations\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;gcc.exe - 生成和调试活动文件\u0026#34;, // 显示名称，可以自定义 \u0026#34;type\u0026#34;: \u0026#34;cppdbg\u0026#34;, // 不要更改 \u0026#34;request\u0026#34;: \u0026#34;launch\u0026#34;, //请求配置类型，可以为 “launch”（启动）或 “attach”（附加） \u0026#34;program\u0026#34;: \u0026#34;${fileDirname}\\\\${fileBasenameNoExtension}.exe\u0026#34;, //用于调试的目标程序 \u0026#34;args\u0026#34;: [], \u0026#34;stopAtEntry\u0026#34;: false, //在程序入口处停止，一般不更改 \u0026#34;cwd\u0026#34;: \u0026#34;${fileDirname}\u0026#34;, //目标的工作目录， \u0026#34;environment\u0026#34;: [], \u0026#34;externalConsole\u0026#34;: false, \u0026#34;MIMode\u0026#34;: \u0026#34;gdb\u0026#34;, //只能为gdb \u0026#34;miDebuggerPath\u0026#34;: \u0026#34;D:\\\\Program\\\\Scoop\\\\apps\\\\mingw\\\\current\\\\bin\\\\gdb.exe\u0026#34;, //gdb的路径 \u0026#34;setupCommands\u0026#34;: [ { \u0026#34;description\u0026#34;: \u0026#34;为 gdb 启用整齐打印\u0026#34;, \u0026#34;text\u0026#34;: \u0026#34;-enable-pretty-printing\u0026#34;, \u0026#34;ignoreFailures\u0026#34;: true } ], \u0026#34;preLaunchTask\u0026#34;: \u0026#34;C/C++: gcc.exe 生成活动文件\u0026#34; //在启动调试之前默认先编译，以便生成目标程序 } ] } vscode-server 隧道 创建隧道\n进入 .vscode-server 文件夹，开启隧道 1 2 cd ~/.vscode-server ./code tunnel 将隧道创建为系统服务 1 ./code tunnel service install 解决用户登出后服务终止的问题：\n执行下面命令确保用户注销后服务仍运行：\n1 sudo loginctl enable-linger $USER 或者\n修改服务配置文件（~/.config/systemd/user/code-tunnel.service），将 WantedBy=multi-user.target 改为 WantedBy=default.target，然后重新启用服务\n启动服务 1 systemctl --user start code-tunnel 或者开机自启：\n1 systemctl --user enable --now code-tunnel 查看日志 1 ./code tunnel service log 卸载服务 1 ./code tunnel service uninstall ctr+p 命令\n输入 @ 可快速浏览符号：函数、变量等 输入 : 可快速跳转到行号 输入 \u0026gt; 所有命令，等效为 ctr+shift+p 输入 # 快捷键 编辑器 ctr+d 可快速匹配一个单词，多次输入匹配同一个单词并可同时更改这几个单词 alt + 点击 可以放置多个光标 ALT+上/下 上下移动一行 ALT+Shift+上/下 复制该行 ctr + L 快速向下选中多行 终端 ctr + ←/→ 在命令的单词之间移动 技巧 符号重命名 右键→查找所用引用 重命名符号 文件路径魔法 新建文件时用/自动创建嵌套目录（如src/components/Button.tsx）\n自定义任务（Tasks） 将npm run build等命令保存为快捷任务，一键执行。\n代码片段（Snippets） 通过JSON配置快速插入常用代码模板。\n","permalink":"https://jhxs.github.io/posts/2151/","summary":"\u003ch1 id=\"配置c环境\"\u003e配置C环境\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e[!important] \u003ca href=\"https://www.cnblogs.com/duruofei/p/15674502.html\"\u003ehttps://www.cnblogs.com/duruofei/p/15674502.html\u003c/a\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"安装mingw\"\u003e安装Mingw\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-PowerShell\" data-lang=\"PowerShell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003escoop\u003c/span\u003e \u003cspan class=\"n\"\u003einstall\u003c/span\u003e \u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e/\u003c/span\u003e\u003cspan class=\"n\"\u003emingw\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"安装扩展\"\u003e安装扩展\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e安装C/C++插件,扩展\u0026ndash;\u0026gt;搜索C/C++\u0026ndash;\u0026gt;安装。还有code runner插件\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cimg alt=\"%E5%9B%BE%E7%89%87 2.png\" loading=\"lazy\" src=\"_extras/%e5%9b%be%e7%89%87-2.png\"\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e新建C源文件，并用vscode打开，点击调试→创建\u003ccode\u003elaunch.json\u003c/code\u003e文件，依次选择\u003ccode\u003eC++(GDB/LLDB)\u003c/code\u003e, 默认配置。此时会自动在当前目录下新建\u003ccode\u003e.vscode\u003c/code\u003e文件夹并生成\u003ccode\u003elauch.json\u003c/code\u003e 将其中代码更改如下将光标放在标签上可以显示此标签的意义\u003c/p\u003e","title":"VSCode"}]