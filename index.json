[{"content":"添加搜索页面 参考官方文档：搜索页面\nPaperMod 使用 Fuse.js Basic 作为搜索基础\n添加以下配置到 config.yml 文件\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 outputs: home: - HTML - RSS - JSON # is necessary languages: zh: languageName: \u0026#34;Chinese\u0026#34; menu: main: - name: \u0026#34;📚文章\u0026#34; url: \u0026#34;/posts\u0026#34; weight: 1 - name: \u0026#34;⏱时间轴\u0026#34; url: \u0026#34;/archives\u0026#34; weight: 2 - name: \u0026#34;🔍搜索\u0026#34; url: \u0026#34;search\u0026#34; weight: 3 在content文件夹中创建search.md并添加以下配置：\n1 2 3 4 5 6 7 8 --- title: \u0026#34;🔍 搜索\u0026#34; # in any language you want layout: \u0026#34;search\u0026#34; # is necessary # url: \u0026#34;/archive\u0026#34; # description: \u0026#34;Description for Search\u0026#34; summary: \u0026#34;search\u0026#34; placeholder: \u0026#34;搜索框内的默认显示\u0026#34; --- 要使得某些特定的不被搜素到，可以在博客开头添加：\n1 2 3 --- searchHidden: true --- 配置时间轴页面 参考官方文档：时间轴页面\n在content文件夹中创建archive.md并添加以下配置：\n1 2 3 4 5 6 --- title: \u0026#34;⏱ 时间轴\u0026#34; layout: \u0026#34;archives\u0026#34; url: \u0026#34;/archives/\u0026#34; summary: archives --- 注意：时间轴原始样式是英文，修改为中文会显得更加协调，参考Hugo 博客时间轴中文化\n添加侧边目录 在 PaperMod 中，目录相关的 html 代码定义在 layouts/partials/toc.html 中，为了修改它，只要创建一个 \u0026lt;your_hugo_site\u0026gt;/layouts/partials/toc.html 覆盖即可，在其中粘贴如下代码：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 {{- $headers := findRE \u0026#34;\u0026lt;h[1-6].*?\u0026gt;(.|\\n])+?\u0026lt;/h[1-6]\u0026gt;\u0026#34; .Content -}} {{- $has_headers := ge (len $headers) 1 -}} {{- if $has_headers -}} \u0026lt;aside id=\u0026#34;toc-container\u0026#34; class=\u0026#34;toc-container wide\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;toc\u0026#34;\u0026gt; \u0026lt;details {{if (.Param \u0026#34;TocOpen\u0026#34;) }} open{{ end }}\u0026gt; \u0026lt;summary accesskey=\u0026#34;c\u0026#34; title=\u0026#34;(Alt + C)\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;details\u0026#34;\u0026gt;{{- i18n \u0026#34;toc\u0026#34; | default \u0026#34;Table of Contents\u0026#34; }}\u0026lt;/span\u0026gt; \u0026lt;/summary\u0026gt; \u0026lt;div class=\u0026#34;inner\u0026#34;\u0026gt; {{- $largest := 6 -}} {{- range $headers -}} {{- $headerLevel := index (findRE \u0026#34;[1-6]\u0026#34; . 1) 0 -}} {{- $headerLevel := len (seq $headerLevel) -}} {{- if lt $headerLevel $largest -}} {{- $largest = $headerLevel -}} {{- end -}} {{- end -}} {{- $firstHeaderLevel := len (seq (index (findRE \u0026#34;[1-6]\u0026#34; (index $headers 0) 1) 0)) -}} {{- $.Scratch.Set \u0026#34;bareul\u0026#34; slice -}} \u0026lt;ul\u0026gt; {{- range seq (sub $firstHeaderLevel $largest) -}} \u0026lt;ul\u0026gt; {{- $.Scratch.Add \u0026#34;bareul\u0026#34; (sub (add $largest .) 1) -}} {{- end -}} {{- range $i, $header := $headers -}} {{- $headerLevel := index (findRE \u0026#34;[1-6]\u0026#34; . 1) 0 -}} {{- $headerLevel := len (seq $headerLevel) -}} {{/* get id=\u0026#34;xyz\u0026#34; */}} {{- $id := index (findRE \u0026#34;(id=\\\u0026#34;(.*?)\\\u0026#34;)\u0026#34; $header 9) 0 }} {{- /* strip id=\u0026#34;\u0026#34; to leave xyz, no way to get regex capturing groups in hugo */ -}} {{- $cleanedID := replace (replace $id \u0026#34;id=\\\u0026#34;\u0026#34; \u0026#34;\u0026#34;) \u0026#34;\\\u0026#34;\u0026#34; \u0026#34;\u0026#34; }} {{- $header := replaceRE \u0026#34;\u0026lt;h[1-6].*?\u0026gt;((.|\\n])+?)\u0026lt;/h[1-6]\u0026gt;\u0026#34; \u0026#34;$1\u0026#34; $header -}} {{- if ne $i 0 -}} {{- $prevHeaderLevel := index (findRE \u0026#34;[1-6]\u0026#34; (index $headers (sub $i 1)) 1) 0 -}} {{- $prevHeaderLevel := len (seq $prevHeaderLevel) -}} {{- if gt $headerLevel $prevHeaderLevel -}} {{- range seq $prevHeaderLevel (sub $headerLevel 1) -}} \u0026lt;ul\u0026gt; {{/* the first should not be recorded */}} {{- if ne $prevHeaderLevel . -}} {{- $.Scratch.Add \u0026#34;bareul\u0026#34; . -}} {{- end -}} {{- end -}} {{- else -}} \u0026lt;/li\u0026gt; {{- if lt $headerLevel $prevHeaderLevel -}} {{- range seq (sub $prevHeaderLevel 1) -1 $headerLevel -}} {{- if in ($.Scratch.Get \u0026#34;bareul\u0026#34;) . -}} \u0026lt;/ul\u0026gt; {{/* manually do pop item */}} {{- $tmp := $.Scratch.Get \u0026#34;bareul\u0026#34; -}} {{- $.Scratch.Delete \u0026#34;bareul\u0026#34; -}} {{- $.Scratch.Set \u0026#34;bareul\u0026#34; slice}} {{- range seq (sub (len $tmp) 1) -}} {{- $.Scratch.Add \u0026#34;bareul\u0026#34; (index $tmp (sub . 1)) -}} {{- end -}} {{- else -}} \u0026lt;/ul\u0026gt; \u0026lt;/li\u0026gt; {{- end -}} {{- end -}} {{- end -}} {{- end }} \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;#{{- $cleanedID -}}\u0026#34; aria-label=\u0026#34;{{- $header | plainify -}}\u0026#34;\u0026gt;{{- $header | safeHTML -}}\u0026lt;/a\u0026gt; {{- else }} \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;#{{- $cleanedID -}}\u0026#34; aria-label=\u0026#34;{{- $header | plainify -}}\u0026#34;\u0026gt;{{- $header | safeHTML -}}\u0026lt;/a\u0026gt; {{- end -}} {{- end -}} \u0026lt;!-- {{- $firstHeaderLevel := len (seq (index (findRE \u0026#34;[1-6]\u0026#34; (index $headers 0) 1) 0)) -}} --\u0026gt; {{- $firstHeaderLevel := $largest }} {{- $lastHeaderLevel := len (seq (index (findRE \u0026#34;[1-6]\u0026#34; (index $headers (sub (len $headers) 1)) 1) 0)) }} \u0026lt;/li\u0026gt; {{- range seq (sub $lastHeaderLevel $firstHeaderLevel) -}} {{- if in ($.Scratch.Get \u0026#34;bareul\u0026#34;) (add . $firstHeaderLevel) }} \u0026lt;/ul\u0026gt; {{- else }} \u0026lt;/ul\u0026gt; \u0026lt;/li\u0026gt; {{- end -}} {{- end }} \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/details\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/aside\u0026gt; \u0026lt;script\u0026gt; let activeElement; let elements; document.addEventListener(\u0026#39;DOMContentLoaded\u0026#39;, function (event) { checkTocPosition(); elements = document.querySelectorAll(\u0026#39;h1[id],h2[id],h3[id],h4[id],h5[id],h6[id]\u0026#39;); if (elements.length \u0026gt; 0) { // Make the first header active activeElement = elements[0]; const id = encodeURI(activeElement.getAttribute(\u0026#39;id\u0026#39;)).toLowerCase(); document.querySelector(`.inner ul li a[href=\u0026#34;#${id}\u0026#34;]`).classList.add(\u0026#39;active\u0026#39;); } // Add event listener for the \u0026#34;back to top\u0026#34; link const topLink = document.getElementById(\u0026#39;top-link\u0026#39;); if (topLink) { topLink.addEventListener(\u0026#39;click\u0026#39;, (event) =\u0026gt; { // Prevent the default action event.preventDefault(); // Smooth scroll to the top window.scrollTo({ top: 0, behavior: \u0026#39;smooth\u0026#39; }); }); } }, false); window.addEventListener(\u0026#39;resize\u0026#39;, function(event) { checkTocPosition(); }, false); window.addEventListener(\u0026#39;scroll\u0026#39;, () =\u0026gt; { // Get the current scroll position const scrollPosition = window.pageYOffset || document.documentElement.scrollTop; // Check if the scroll position is at the top of the page if (scrollPosition === 0) { return; } // Ensure elements is a valid NodeList if (elements \u0026amp;\u0026amp; elements.length \u0026gt; 0) { // Check if there is an object in the top half of the screen or keep the last item active activeElement = Array.from(elements).find((element) =\u0026gt; { if ((getOffsetTop(element) - scrollPosition) \u0026gt; 0 \u0026amp;\u0026amp; (getOffsetTop(element) - scrollPosition) \u0026lt; window.innerHeight / 2) { return element; } }) || activeElement; elements.forEach(element =\u0026gt; { const id = encodeURI(element.getAttribute(\u0026#39;id\u0026#39;)).toLowerCase(); const tocLink = document.querySelector(`.inner ul li a[href=\u0026#34;#${id}\u0026#34;]`); if (element === activeElement){ tocLink.classList.add(\u0026#39;active\u0026#39;); // Ensure the active element is in view within the .inner container const tocContainer = document.querySelector(\u0026#39;.toc .inner\u0026#39;); const linkOffsetTop = tocLink.offsetTop; const containerHeight = tocContainer.clientHeight; const linkHeight = tocLink.clientHeight; // Calculate the scroll position to center the active link const scrollPosition = linkOffsetTop - (containerHeight / 2) + (linkHeight / 2); tocContainer.scrollTo({ top: scrollPosition, behavior: \u0026#39;smooth\u0026#39; }); } else { tocLink.classList.remove(\u0026#39;active\u0026#39;); } }); } }, false); const main = parseInt(getComputedStyle(document.body).getPropertyValue(\u0026#39;--article-width\u0026#39;), 10); const toc = parseInt(getComputedStyle(document.body).getPropertyValue(\u0026#39;--toc-width\u0026#39;), 10); const gap = parseInt(getComputedStyle(document.body).getPropertyValue(\u0026#39;--gap\u0026#39;), 10); function checkTocPosition() { const width = document.body.scrollWidth; if (width - main - (toc * 2) - (gap * 4) \u0026gt; 0) { document.getElementById(\u0026#34;toc-container\u0026#34;).classList.add(\u0026#34;wide\u0026#34;); } else { document.getElementById(\u0026#34;toc-container\u0026#34;).classList.remove(\u0026#34;wide\u0026#34;); } } function getOffsetTop(element) { if (!element.getClientRects().length) { return 0; } let rect = element.getBoundingClientRect(); let win = element.ownerDocument.defaultView; return rect.top + win.pageYOffset; } \u0026lt;/script\u0026gt; {{- end }} 其中，后半部分为 js 代码，根据阅读内容滚动并加粗相应标题就由其实现。\n然后，添加 css 样式的代码，创建 \u0026lt;your_hugo_site\u0026gt;/assets/css/extended/toc.css 文件，并拷贝以下内容：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 :root { --nav-width: 1380px; --article-width: 650px; --toc-width: 300px; } .toc { margin: 0 2px 40px 2px; border: 1px solid var(--border); background: var(--entry); border-radius: var(--radius); padding: 0.4em; } .toc-container.wide { position: absolute; height: 100%; border-right: 1px solid var(--border); left: calc((var(--toc-width) + var(--gap)) * -1); top: calc(var(--gap) * 2); width: var(--toc-width); } .wide .toc { position: sticky; top: var(--gap); border: unset; background: unset; border-radius: unset; width: 100%; margin: 0 2px 40px 2px; } .toc details summary { cursor: zoom-in; margin-inline-start: 20px; padding: 12px 0; } .toc details[open] summary { font-weight: 500; } .toc-container.wide .toc .inner { margin: 0; } .active { font-size: 110%; font-weight: 600; } .toc ul { list-style-type: circle; } .toc .inner { margin: 0 0 0 20px; padding: 0px 15px 15px 20px; font-size: 16px; /*目录显示高度*/ max-height: 83vh; overflow-y: auto; } .toc .inner::-webkit-scrollbar-thumb { /*滚动条*/ background: var(--border); border: 7px solid var(--theme); border-radius: var(--radius); } .toc li ul { margin-inline-start: calc(var(--gap) * 0.5); list-style-type: none; } .toc li { list-style: none; font-size: 0.95rem; padding-bottom: 5px; } .toc li a:hover { color: var(--secondary); } 到此为止，目录应该就能在侧边正确显示了🎉🎉。\n阅读百分比 阅读百分比实现的核心思想就是每当发生滚动事件时，根据滚动条高度计算当前阅读进度。这里我们将进度的数字显示在 TOP 按钮上，TOP 按钮定义在 footer.html 中，因此我们要创建 \u0026lt;your_hugo_site\u0026gt;/layouts/partials/footer.html，将主题中对应位置的 footer.html 内容拷贝进去，然后修改 TOP 按钮相关的代码，原代码为：\n1 2 3 4 5 6 7 {{- if (not site.Params.disableScrollToTop) }} \u0026lt;a href=\u0026#34;#top\u0026#34; aria-label=\u0026#34;go to top\u0026#34; title=\u0026#34;Go to Top (Alt + G)\u0026#34; class=\u0026#34;top-link\u0026#34; id=\u0026#34;top-link\u0026#34; accesskey=\u0026#34;g\u0026#34;\u0026gt; \u0026lt;svg xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; viewBox=\u0026#34;0 0 12 6\u0026#34; fill=\u0026#34;currentColor\u0026#34;\u0026gt; \u0026lt;path d=\u0026#34;M12 6H0l6-6z\u0026#34; /\u0026gt; \u0026lt;/svg\u0026gt; \u0026lt;/a\u0026gt; {{- end }} 我们要在其中添加一个用于展示进度的 span 和更新进度的 js 代码，即修改为：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 {{- if (not .Site.Params.disableScrollToTop) }} \u0026lt;a href=\u0026#34;#top\u0026#34; aria-label=\u0026#34;go to top\u0026#34; title=\u0026#34;Go to Top (Alt + G)\u0026#34; class=\u0026#34;top-link\u0026#34; id=\u0026#34;top-link\u0026#34; accesskey=\u0026#34;g\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;topInner\u0026#34;\u0026gt; \u0026lt;svg class=\u0026#34;topSvg\u0026#34; xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; viewBox=\u0026#34;0 0 12 6\u0026#34; fill=\u0026#34;currentColor\u0026#34;\u0026gt; \u0026lt;path d=\u0026#34;M12 6H0l6-6z\u0026#34;/\u0026gt; \u0026lt;/svg\u0026gt; \u0026lt;span id=\u0026#34;read_progress\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;script\u0026gt; document.addEventListener(\u0026#39;scroll\u0026#39;, function (e) { const readProgress = document.getElementById(\u0026#34;read_progress\u0026#34;); const scrollHeight = document.documentElement.scrollHeight; const clientHeight = document.documentElement.clientHeight; const scrollTop = document.documentElement.scrollTop || document.body.scrollTop; readProgress.innerText = ((scrollTop / (scrollHeight - clientHeight)).toFixed(2) * 100).toFixed(0); }) \u0026lt;/script\u0026gt; {{- end }} 然后添加相关 css 代码，即创建 \u0026lt;your_hugo_site\u0026gt;/assets/css/extended/top.css 文件，并拷贝以下内容：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 /*top*/ .topInner { display: grid; align-items: baseline; justify-items: center; margin: 7px; font-weight: 900; } .topSvg { width: 20px; } .top-link { padding: unset; } /*到顶部*/ .top-link { background: var(--entry); -webkit-transition: box-shadow 0.4s ease, transform 0.4s ease; -moz-transition: box-shadow 0.4s ease, transform 0.4s ease; -o-transition: box-shadow 0.4s ease, transform 0.4s ease; transition: box-shadow 0.4s ease, transform 0.4s ease; box-shadow: 0px 2px 4px rgb(5 10 15 / 5%), 0px 7px 13px -3px rgb(5 10 15 / 30%); } .dark .top-link { background: var(--entry); -webkit-transition: box-shadow 0.4s ease, transform 0.4s ease; -moz-transition: box-shadow 0.4s ease, transform 0.4s ease; -o-transition: box-shadow 0.4s ease, transform 0.4s ease; transition: box-shadow 0.4s ease, transform 0.4s ease; box-shadow: 0px 2px 4px rgb(5 10 15 / 5%), 0px 7px 13px -3px rgb(5 10 15 / 30%); } .top-link:hover { color: rgb(108, 108, 108); /*-webkit-transform: scale(1.1);*/ /*-moz-transform: scale(1.1);*/ /*-ms-transform: scale(1.1);*/ /*-o-transform: scale(1.1);*/ /*transform: scale(1.1);*/ transition: box-shadow 0.4s ease, transform 0.4s ease; box-shadow: 0px 4px 8px rgb(5 10 15 / 5%), 0px 7px 13px -3px rgb(5 10 15 / 30%); } .dark .top-link:hover { color: rgba(180, 181, 182, .8); /*-webkit-transform: scale(1.1);*/ /*-moz-transform: scale(1.1);*/ /*-ms-transform: scale(1.1);*/ /*-o-transform: scale(1.1);*/ /*transform: scale(1.1);*/ transition: box-shadow 0.4s ease, transform 0.4s ease; box-shadow: 0px 4px 8px rgb(5 10 15 / 5%), 0px 7px 13px -3px rgb(5 10 15 / 30%); } 到此为止，阅读进度应该就能在 TOP 按钮上正确显示了🎉🎉。\n添加 标签 页面 Tags 属于 PaperMod 已经默认实现的一个页面，只要在菜单中添加一个指向 /tags 的按钮即可：\n1 2 3 4 5 menu: main: - name: 🏷️标签 url: /tags weight: 2 抄袭对象 [!tip] 抄袭\n在PaperMod中引入侧边目录和阅读进度显示 | 周鑫的个人博客 PaperMod主题配置 | 🚀 田少晗的个人网站 ","permalink":"https://jhxs.github.io/posts/1052/","summary":"\u003ch1 id=\"添加搜索页面\"\u003e添加搜索页面\u003c/h1\u003e\n\u003cp\u003e参考官方文档：\u003ca href=\"https://github.com/adityatelange/hugo-PaperMod/wiki/Features#search-page\"\u003e\u003cstrong\u003e搜索页面\u003c/strong\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003ePaperMod 使用 \u003ccode\u003eFuse.js Basic\u003c/code\u003e 作为搜索基础\u003c/p\u003e\n\u003cp\u003e添加以下配置到 config.yml 文件\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nt\"\u003eoutputs\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"nt\"\u003ehome\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e- \u003cspan class=\"l\"\u003eHTML\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e- \u003cspan class=\"l\"\u003eRSS\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e- \u003cspan class=\"l\"\u003eJSON\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"c\"\u003e# is necessary\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"nt\"\u003elanguages\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"nt\"\u003ezh\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e      \u003c/span\u003e\u003cspan class=\"nt\"\u003elanguageName\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;Chinese\u0026#34;\u003c/span\u003e\u003cspan class=\"w\"\u003e          \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e      \u003c/span\u003e\u003cspan class=\"nt\"\u003emenu\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"nt\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e          \u003c/span\u003e- \u003cspan class=\"nt\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;📚文章\u0026#34;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"nt\"\u003eurl\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;/posts\u0026#34;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"nt\"\u003eweight\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"m\"\u003e1\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e          \u003c/span\u003e- \u003cspan class=\"nt\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;⏱时间轴\u0026#34;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"nt\"\u003eurl\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;/archives\u0026#34;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"nt\"\u003eweight\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"m\"\u003e2\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e          \u003c/span\u003e- \u003cspan class=\"nt\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;🔍搜索\u0026#34;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"nt\"\u003eurl\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;search\u0026#34;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"nt\"\u003eweight\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"m\"\u003e3\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e在\u003ccode\u003econtent\u003c/code\u003e文件夹中创建\u003ccode\u003esearch.md\u003c/code\u003e并添加以下配置：\u003c/p\u003e","title":"修改Hugo-PaperMod主题加入侧边目录"},{"content":"手动上传 github 准备 安装软件 1 sudo pacman -Sy --needed hugo git 注册 GitHub 并创建仓库 Github 注册 创建一个与你用户名相同的仓库，比如: 1 \u0026lt;Github用户名\u0026gt;.github.io Hugo 博客项目 创建源代码 在本地找个位置存储 源代码\n1 2 3 4 5 6 7 8 9 10 11 # 创建文件夹 mkdir blog # 打开文件夹 cd blog # 使用 hugo 创建文件夹(此处是您的代码仓库) hugo new site \u0026lt;你的文件夹名\u0026gt; #打开你的文件夹 cd \u0026lt;你的文件夹名\u0026gt; 添加主题 (此处使用 主题 - PaperMod 作为例子)\n在当前 “根目录” 文件夹目录下 1 2 3 4 5 6 # git初始化本地仓库 git init # 将 PaperMod下载到本地 git submodule add \\\\ \u0026lt;https://github.com/adityatelange/hugo-PaperMod.git\u0026gt; \\\\ themes/PaperMod 如果 git submodule add 不行，则可以网页浏览到 PaperMod主页点击 \u0026lt;\u0026gt;Code 下载 zip 文件，压缩文件将文件名改为 PaperMod 并复制粘贴到_当前themes目录_下即可。 配置 hugo.toml 将下面代码复制粘贴到hugo.toml下。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 baseURL: \u0026#39;https://\u0026lt;username\u0026gt;.github.io/\u0026#39; defaultContentLanguage: zh # 主语言 languages: zh: languageName: 中文 languageCode: zh-cn weight: 1 title: \u0026#39;hansel 的垃圾站\u0026#39; theme: \u0026#39;PaperMod\u0026#39; pagination: pagerSize: 9 # 首页文章显示个数 summaryLength: 999999 # 首页文章摘要字数 hasCJKLanguage: true rssLimit: 10 # 限制 rss 输出的数量 markup: highlight: noClasses: false style: catppuccin-frappe goldmark: renderer: unsafe: true tableOfContents: startLevel: 2 # 从 h2 开始 endLevel: 3 # 到 h4 结束 ordered: false # 生成 ul 而不是 ol outputs: home: - HTML - RSS - JSON params: showtoc: true # 让文章页出现目录 tocopen: true # 默认展开，false 则折叠 DateFormat: \u0026#34;2006年01月02日\u0026#34; defaultTheme: \u0026#34;auto\u0026#34; homeInfoParams: Title: \u0026#34;你好，我是 hansel \u0026#34; Content: \u0026#34;欢迎来到我的博客主页 \u0026#34; menu: main: - name: \u0026#34;个人\u0026#34; url: \u0026#34;/posts\u0026#34; weight: 1 - name: \u0026#34;归档\u0026#34; url: \u0026#34;/archives\u0026#34; weight: 2 - name: \u0026#34;学习\u0026#34; url: \u0026#34;/study\u0026#34; weight: 3 baseURL: 访问你个人网页的链接; url: 链接的是当前目录下content下的文件/文件夹; weight: 表示网页部署位置 params.showtoc 和 params.tocopen 开启文章的目录 写第一篇文章 1 2 # 在当前 根目录 下输入 hugo new content/posts/hello-hugo.md 使用hugo new会链接脚本创建markdown的上述链接: 1 2 3 4 5 +++ date = \u0026#39;2025-09-15T09:49:33+08:00\u0026#39; draft = true title = \u0026#39;Hello Hugo\u0026#39; +++ 在当前md下输入\u0026lt;您的内容\u0026gt;: 1 2 3 4 5 6 7 +++ date = \u0026#39;2025-09-15T09:49:33+08:00\u0026#39; draft = true title = \u0026#39;Hello Hugo\u0026#39; +++ 这是我的第一篇文章！我正在学习 Hugo 😊 本地预览网站 \u0026amp; 📁 构建 public/ 文件夹 1 2 3 4 5 # 当前根目录下输入 hugo server -D # 使用浏览器打开，查看效果 \u0026lt;http://localhost:1313\u0026gt; 当你想部署网站时，运行： 1 hugo 这条命令会生成 **public/** 文件夹，它包含了 构建好的静态网页内容，可以直接部署。 你部署到网页上的内容应该是在 public/ 下 1 2 3 4 5 6 7 8 9 10 # 进入 public/ 目录并初始化 Git cd public git init git remote add origin \u0026lt;https://github.com/你的用户名/你的用户名.github.io.git\u0026gt; git checkout -b gh-pages # 提交构建结果并推送到 gh-pages 分支 git add . git commit -m \u0026#34;手动部署 Hugo 页面\u0026#34; git push -f origin gh-pages 在 GitHub 设置 Pages 分支 打开你的 GitHub 仓库 点击菜单栏 Settings → Pages 在 Source 选项中选择： 分支：gh-pages 目录：/(root) 保存并等待 GitHub 自动生成网页（几分钟内） 总结 每次想新写内容直接 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 # 文件存储在content下 hugo new \u0026lt;你的文件路径\u0026gt; # 本地查看 hugo server -D # 浏览器查看 \u0026lt;http://localhost:1313\u0026gt; # 之后直接在根目录下,注意你当前的分支应该是 main ## 查看分支 git branch git add . git commit -m \u0026#34;你的日志\u0026#34; git push origin main 此后你写的 deploy.yml 会在 actions 下自动部署网页，无需在进入到public下再次推送静态网页 您的网页源代码在 main 分支下，静态部署网页代码在 pulic 文件夹下(也是访问您网页的代码内容) 使用 Obsidian + Enveloppe 插件自动上传github 先按照 Hugo \u0026gt; 手动上传 github 部分使用 hugo 初始化一个网站，并配置好你喜欢的主题，并发布到 Github 上。\nEnveloppe 插件 给 Obsidian 安装 Enveloppe 插件，该插件的作用是将 Obsidian 中的文章和本地附件上传到 Github 仓库，上传前可以指定文件目录、自定义内容替换等操作。\n仓库配置 注意：\n生成的 token 不要放在 Github 的公共仓库，检测到 token 就会失效。 通过 here 生成 token 时的 链接 会自动带上权限，你只需要设置名字和过期时间即可。 插件配置 使用 Obsidian 免费建个人博客 | PrintLove\n前往 miaogaolin/obsidian-github-publisher-hugo 拷贝 settings.json 设置，然后粘贴导入插件：\nObsidian 文章模板 配置是和 Hugo 强关联的，如果你用了其它工具，就根据自己的情况调整。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 --- title: \u0026#34;{{title}}\u0026#34; date: \u0026#34;{{date}}\u0026#34; tags: - blog slug: \u0026#34;{{time}}\u0026#34; share: true description: \u0026#34;\u0026#34; series: lastmod: author: hansel dir: posts cover.image: \u0026#34;\u0026#34; --- data : 创建时间，我这边生成的格式是 YYYY-MM-DDTHH:mm:ss slug : 自定义 URL 中文章的访问名称，默认用时间戳填充模板格式为X share: 配合 Enveloppe插件用的,true表示 obsidian 的文章可以发布 description: 文章的描述 SEO 优化，为空时默认会截取文章前面的内容 series: \u0026quot;系列\u0026quot;: 系列文章 lastmod: 文章最后更新的时间 author: 作者名称 dir 属性：设置文章的上传目录，如果不设置，则以 content/ 为根目录。dir:\u0026quot;posts\u0026quot; 表示上传到 content/posts 目录，也只有在 posts 目录下才会在网页上直接显示。 cover.image：设置封面，在使用 Enveloppe 后会转化为二级 key。 发布 Obsidian 命令 先使用命令行发布当前文章，输入 active，然后选择 Enveloppe 即可，记着文章的 share 属性要开启，即 true。\n如果你想上传多个 share 为 true 的文章，使用的命令为：\nRefresh published and upload new notes 将所有 share 为 true 且新更新的文章发布 Refresh all published notes 将所有 share 为 true 的文章都发布 菜单 当然插件的配置也支持菜单模式，配置前往：Plugin settings -\u0026gt; Menu。\n部署博客 部署到 GitHub Pages（使用 Actions 自动部署） 初始化 git 并推送到 GitHub 1 2 3 4 5 6 7 # 在根目录下 git init git add . git commit -m \u0026#34;first commit\u0026#34; git branch -M main git remote add origin git@github.com:你的用户名/你的用户名.github.io.git git push -u origin main ⚠️ 如果你使用的是 HTTPS，请把 git@github.com… 改为 [https://github.com/](\u0026lt;https://github.com/\u0026gt;)你的用户名/你的用户名.github.io.git\n添加部署工作流 创建文件 (在根目录下) .github/workflows/deploy.yml：(注意 .github 的文件夹也是自己创建的) 复制一下内容到 deploy.yml 下 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 name: Deploy Hugo site to GitHub Pages on: push: branches: [main] # 👈 每次推送到 main 分支就会自动部署 jobs: build: runs-on: ubuntu-latest steps: - name: Checkout code uses: actions/checkout@v4 with: submodules: true # 主题若用 submodule 需拉取 fetch-depth: 0 - name: Setup Hugo uses: peaceiris/actions-hugo@v3 with: hugo-version: latest extended: true - name: Build Hugo site run: hugo --minify - name: Deploy to GitHub Pages 🚀 uses: peaceiris/actions-gh-pages@v4 if: github.ref == \u0026#39;refs/heads/main\u0026#39; with: github_token: ${{ secrets.GITHUB_TOKEN }} publish_dir: ./public 在 GitHub 设置 Pages 分支 打开你的 GitHub 仓库 点击菜单栏 Settings → Pages 在 Source 选项中选择： 分支：gh-pages 目录：/(root) 保存并等待 GitHub 自动生成网页（几分钟内） [!tip] 注意\n必须给 GITHUB_TOKEN 写权限（ Settings → Actions → General → Read and write permissions）。 抄袭对象 [!tip] 参考\n使用Hugo 搭建博客并部署到 GitHub Pages | VSVnakers 主页 Notion-Hugo-Github博客系统一体化 - xfeng\u0026rsquo;s blog notion-hugo-blog：将Notion内容自动化生成Hugo网站 | Welcome to train.sh obsidian如何自动发布hugo博客 - 任意的Blog 使用 Obsidian 免费建个人博客 | PrintLove ","permalink":"https://jhxs.github.io/posts/1706/","summary":"\u003ch1 id=\"手动上传-github\"\u003e手动上传 github\u003c/h1\u003e\n\u003ch2 id=\"准备\"\u003e准备\u003c/h2\u003e\n\u003ch3 id=\"安装软件\"\u003e安装软件\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003esudo pacman -Sy --needed hugo git\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch3 id=\"注册-github-并创建仓库\"\u003e注册 GitHub 并创建仓库\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com\"\u003eGithub 注册\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e创建一个\u003cstrong\u003e与你用户名相同的仓库\u003c/strong\u003e，比如:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u0026lt;Github用户名\u0026gt;.github.io\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"hugo-博客项目\"\u003eHugo 博客项目\u003c/h2\u003e\n\u003ch3 id=\"创建源代码\"\u003e创建源代码\u003c/h3\u003e\n\u003cp\u003e在本地找个位置存储 \u003cstrong\u003e源代码\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 创建文件夹\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003emkdir blog\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 打开文件夹\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ecd\u003c/span\u003e blog\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 使用 hugo 创建文件夹(此处是您的代码仓库)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ehugo new site \u0026lt;你的文件夹名\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e#打开你的文件夹\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ecd\u003c/span\u003e \u0026lt;你的文件夹名\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch3 id=\"添加主题\"\u003e添加主题\u003c/h3\u003e\n\u003cblockquote\u003e\n\u003cp\u003e(此处使用 \u003cstrong\u003e主题\u003c/strong\u003e - \u003cstrong\u003ePaperMod\u003c/strong\u003e 作为例子)\u003c/p\u003e","title":"Hugo"},{"content":"手动上传 github 准备 安装软件 1 sudo pacman -Sy --needed hugo git 注册 GitHub 并创建仓库 Github 注册 创建一个与你用户名相同的仓库，比如: 1 \u0026lt;Github用户名\u0026gt;.github.io Hugo 博客项目 创建源代码 在本地找个位置存储 源代码\n1 2 3 4 5 6 7 8 9 10 11 # 创建文件夹 mkdir blog # 打开文件夹 cd blog # 使用 hugo 创建文件夹(此处是您的代码仓库) hugo new site \u0026lt;你的文件夹名\u0026gt; #打开你的文件夹 cd \u0026lt;你的文件夹名\u0026gt; 添加主题 (此处使用 主题 - PaperMod 作为例子)\n在当前 “根目录” 文件夹目录下 1 2 3 4 5 6 # git初始化本地仓库 git init # 将 PaperMod下载到本地 git submodule add \\\\ \u0026lt;https://github.com/adityatelange/hugo-PaperMod.git\u0026gt; \\\\ themes/PaperMod 如果 git submodule add 不行，则可以网页浏览到 PaperMod主页点击 \u0026lt;\u0026gt;Code 下载 zip 文件，压缩文件将文件名改为 PaperMod 并复制粘贴到_当前themes目录_下即可。 配置 hugo.toml 将下面代码复制粘贴到hugo.toml下。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 baseURL: \u0026#39;https://\u0026lt;username\u0026gt;.github.io/\u0026#39; defaultContentLanguage: zh # 主语言 languages: zh: languageName: 中文 languageCode: zh-cn weight: 1 title: \u0026#39;hansel 的垃圾站\u0026#39; theme: \u0026#39;PaperMod\u0026#39; pagination: pagerSize: 9 # 首页文章显示个数 summaryLength: 999999 # 首页文章摘要字数 hasCJKLanguage: true rssLimit: 10 # 限制 rss 输出的数量 markup: highlight: noClasses: false style: catppuccin-frappe goldmark: renderer: unsafe: true tableOfContents: startLevel: 2 # 从 h2 开始 endLevel: 3 # 到 h4 结束 ordered: false # 生成 ul 而不是 ol outputs: home: - HTML - RSS - JSON params: showtoc: true # 让文章页出现目录 tocopen: true # 默认展开，false 则折叠 DateFormat: \u0026#34;2006年01月02日\u0026#34; defaultTheme: \u0026#34;auto\u0026#34; homeInfoParams: Title: \u0026#34;你好，我是 hansel \u0026#34; Content: \u0026#34;欢迎来到我的博客主页 \u0026#34; menu: main: - name: \u0026#34;个人\u0026#34; url: \u0026#34;/posts\u0026#34; weight: 1 - name: \u0026#34;归档\u0026#34; url: \u0026#34;/archives\u0026#34; weight: 2 - name: \u0026#34;学习\u0026#34; url: \u0026#34;/study\u0026#34; weight: 3 baseURL: 访问你个人网页的链接; url: 链接的是当前目录下content下的文件/文件夹; weight: 表示网页部署位置 params.showtoc 和 params.tocopen 开启文章的目录 写第一篇文章 1 2 # 在当前 根目录 下输入 hugo new content/posts/hello-hugo.md 使用hugo new会链接脚本创建markdown的上述链接: 1 2 3 4 5 +++ date = \u0026#39;2025-09-15T09:49:33+08:00\u0026#39; draft = true title = \u0026#39;Hello Hugo\u0026#39; +++ 在当前md下输入\u0026lt;您的内容\u0026gt;: 1 2 3 4 5 6 7 +++ date = \u0026#39;2025-09-15T09:49:33+08:00\u0026#39; draft = true title = \u0026#39;Hello Hugo\u0026#39; +++ 这是我的第一篇文章！我正在学习 Hugo 😊 本地预览网站 \u0026amp; 📁 构建 public/ 文件夹 1 2 3 4 5 # 当前根目录下输入 hugo server -D # 使用浏览器打开，查看效果 \u0026lt;http://localhost:1313\u0026gt; 当你想部署网站时，运行： 1 hugo 这条命令会生成 **public/** 文件夹，它包含了 构建好的静态网页内容，可以直接部署。 你部署到网页上的内容应该是在 public/ 下 1 2 3 4 5 6 7 8 9 10 # 进入 public/ 目录并初始化 Git cd public git init git remote add origin \u0026lt;https://github.com/你的用户名/你的用户名.github.io.git\u0026gt; git checkout -b gh-pages # 提交构建结果并推送到 gh-pages 分支 git add . git commit -m \u0026#34;手动部署 Hugo 页面\u0026#34; git push -f origin gh-pages 在 GitHub 设置 Pages 分支 打开你的 GitHub 仓库 点击菜单栏 Settings → Pages 在 Source 选项中选择： 分支：gh-pages 目录：/(root) 保存并等待 GitHub 自动生成网页（几分钟内） 总结 每次想新写内容直接 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 # 文件存储在content下 hugo new \u0026lt;你的文件路径\u0026gt; # 本地查看 hugo server -D # 浏览器查看 \u0026lt;http://localhost:1313\u0026gt; # 之后直接在根目录下,注意你当前的分支应该是 main ## 查看分支 git branch git add . git commit -m \u0026#34;你的日志\u0026#34; git push origin main 此后你写的 deploy.yml 会在 actions 下自动部署网页，无需在进入到public下再次推送静态网页 您的网页源代码在 main 分支下，静态部署网页代码在 pulic 文件夹下(也是访问您网页的代码内容) 使用 Obsidian + Enveloppe 插件自动上传github 先按照 使用 Hugo 搭建博客 \u0026gt; 手动上传 github 部分使用 hugo 初始化一个网站，并配置好你喜欢的主题，并发布到 Github 上。\nEnveloppe 插件 给 Obsidian 安装 Enveloppe 插件，该插件的作用是将 Obsidian 中的文章和本地附件上传到 Github 仓库，上传前可以指定文件目录、自定义内容替换等操作。\n仓库配置 注意：\n生成的 token 不要放在 Github 的公共仓库，检测到 token 就会失效。 通过 here 生成 token 时的 链接 会自动带上权限，你只需要设置名字和过期时间即可。 插件配置 使用 Obsidian 免费建个人博客 | PrintLove\n前往 miaogaolin/obsidian-github-publisher-hugo 拷贝 settings.json 设置，然后粘贴导入插件：\nObsidian 文章模板 配置是和 Hugo 强关联的，如果你用了其它工具，就根据自己的情况调整。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 --- title: \u0026#34;{{title}}\u0026#34; date: \u0026#34;{{date}}\u0026#34; tags: - blog slug: \u0026#34;{{time}}\u0026#34; share: true description: \u0026#34;\u0026#34; series: lastmod: author: hansel dir: posts cover.image: \u0026#34;\u0026#34; --- data : 创建时间，我这边生成的格式是 YYYY-MM-DDTHH:mm:ss slug : 自定义 URL 中文章的访问名称，默认用时间戳填充模板格式为X share: 配合 Enveloppe插件用的,true表示 obsidian 的文章可以发布 description: 文章的描述 SEO 优化，为空时默认会截取文章前面的内容 series: \u0026quot;系列\u0026quot;: 系列文章 lastmod: 文章最后更新的时间 author: 作者名称 dir 属性：设置文章的上传目录，如果不设置，则以 content/ 为根目录。dir:\u0026quot;posts\u0026quot; 表示上传到 content/posts 目录，也只有在 posts 目录下才会在网页上直接显示。 cover.image：设置封面，在使用 Enveloppe 后会转化为二级 key。 发布 Obsidian 命令 先使用命令行发布当前文章，输入 active，然后选择 Enveloppe 即可，记着文章的 share 属性要开启，即 true。\n如果你想上传多个 share 为 true 的文章，使用的命令为：\nRefresh published and upload new notes 将所有 share 为 true 且新更新的文章发布 Refresh all published notes 将所有 share 为 true 的文章都发布 菜单 当然插件的配置也支持菜单模式，配置前往：Plugin settings -\u0026gt; Menu。\n部署博客 部署到 GitHub Pages（使用 Actions 自动部署） 初始化 git 并推送到 GitHub 1 2 3 4 5 6 7 # 在根目录下 git init git add . git commit -m \u0026#34;first commit\u0026#34; git branch -M main git remote add origin git@github.com:你的用户名/你的用户名.github.io.git git push -u origin main ⚠️ 如果你使用的是 HTTPS，请把 git@github.com… 改为 [https://github.com/](\u0026lt;https://github.com/\u0026gt;)你的用户名/你的用户名.github.io.git\n添加部署工作流 创建文件 (在根目录下) .github/workflows/deploy.yml：(注意 .github 的文件夹也是自己创建的) 复制一下内容到 deploy.yml 下 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 name: Deploy Hugo site to GitHub Pages on: push: branches: [main] # 👈 每次推送到 main 分支就会自动部署 jobs: build: runs-on: ubuntu-latest steps: - name: Checkout code uses: actions/checkout@v4 with: submodules: true # 主题若用 submodule 需拉取 fetch-depth: 0 - name: Setup Hugo uses: peaceiris/actions-hugo@v3 with: hugo-version: latest extended: true - name: Build Hugo site run: hugo --minify - name: Deploy to GitHub Pages 🚀 uses: peaceiris/actions-gh-pages@v4 if: github.ref == \u0026#39;refs/heads/main\u0026#39; with: github_token: ${{ secrets.GITHUB_TOKEN }} publish_dir: ./public 在 GitHub 设置 Pages 分支 打开你的 GitHub 仓库 点击菜单栏 Settings → Pages 在 Source 选项中选择： 分支：gh-pages 目录：/(root) 保存并等待 GitHub 自动生成网页（几分钟内） [!tip] 注意\n必须给 GITHUB_TOKEN 写权限（ Settings → Actions → General → Read and write permissions）。 抄袭对象 [!tip] 参考\n使用Hugo 搭建博客并部署到 GitHub Pages | VSVnakers 主页 Notion-Hugo-Github博客系统一体化 - xfeng\u0026rsquo;s blog notion-hugo-blog：将Notion内容自动化生成Hugo网站 | Welcome to train.sh obsidian如何自动发布hugo博客 - 任意的Blog 使用 Obsidian 免费建个人博客 | PrintLove ","permalink":"https://jhxs.github.io/posts/1706/","summary":"\u003ch1 id=\"手动上传-github\"\u003e手动上传 github\u003c/h1\u003e\n\u003ch2 id=\"准备\"\u003e准备\u003c/h2\u003e\n\u003ch3 id=\"安装软件\"\u003e安装软件\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003esudo pacman -Sy --needed hugo git\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch3 id=\"注册-github-并创建仓库\"\u003e注册 GitHub 并创建仓库\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com\"\u003eGithub 注册\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e创建一个\u003cstrong\u003e与你用户名相同的仓库\u003c/strong\u003e，比如:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u0026lt;Github用户名\u0026gt;.github.io\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"hugo-博客项目\"\u003eHugo 博客项目\u003c/h2\u003e\n\u003ch3 id=\"创建源代码\"\u003e创建源代码\u003c/h3\u003e\n\u003cp\u003e在本地找个位置存储 \u003cstrong\u003e源代码\u003c/strong\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 创建文件夹\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003emkdir blog\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 打开文件夹\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ecd\u003c/span\u003e blog\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 使用 hugo 创建文件夹(此处是您的代码仓库)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ehugo new site \u0026lt;你的文件夹名\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e#打开你的文件夹\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ecd\u003c/span\u003e \u0026lt;你的文件夹名\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch3 id=\"添加主题\"\u003e添加主题\u003c/h3\u003e\n\u003cblockquote\u003e\n\u003cp\u003e(此处使用 \u003cstrong\u003e主题\u003c/strong\u003e - \u003cstrong\u003ePaperMod\u003c/strong\u003e 作为例子)\u003c/p\u003e","title":"Hugo"},{"content":" [!tip] 插件列表\n用于Obsidian图片管理的4个插件 - 经验分享 - Obsidian 中文论坛 Image Converter Auto link title Enveloppe —— 将 Obsidian 中的文章和本地附件上传到 Github 仓库，上传前可以指定文件目录、自定义内容替换等操作。 ","permalink":"https://jhxs.github.io/posts/2106/","summary":"\u003cblockquote\u003e\n\u003cp\u003e[!tip] 插件列表\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://forum-zh.obsidian.md/t/topic/44910\"\u003e用于Obsidian图片管理的4个插件 - 经验分享 - Obsidian 中文论坛\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eImage Converter\u003c/li\u003e\n\u003cli\u003eAuto link title\u003c/li\u003e\n\u003cli\u003eEnveloppe —— 将 Obsidian 中的文章和本地附件上传到 Github 仓库，上传前可以指定文件目录、自定义内容替换等操作。\u003c/li\u003e\n\u003c/ul\u003e\u003c/blockquote\u003e","title":"Obsidian"},{"content":"配置C环境 [!important] https://www.cnblogs.com/duruofei/p/15674502.html\n安装Mingw 1 scoop install main/mingw 安装扩展 安装C/C++插件,扩展\u0026ndash;\u0026gt;搜索C/C++\u0026ndash;\u0026gt;安装。还有code runner插件 新建C源文件，并用vscode打开，点击调试→创建launch.json文件，依次选择C++(GDB/LLDB), 默认配置。此时会自动在当前目录下新建.vscode文件夹并生成lauch.json 将其中代码更改如下将光标放在标签上可以显示此标签的意义\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 { // 使用 IntelliSense 了解相关属性。 // 悬停以查看现有属性的描述。 // 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387 \u0026#34;version\u0026#34;: \u0026#34;0.2.0\u0026#34;, \u0026#34;configurations\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;gcc.exe - 生成和调试活动文件\u0026#34;, // 显示名称，可以自定义 \u0026#34;type\u0026#34;: \u0026#34;cppdbg\u0026#34;, // 不要更改 \u0026#34;request\u0026#34;: \u0026#34;launch\u0026#34;, //请求配置类型，可以为 “launch”（启动）或 “attach”（附加） \u0026#34;program\u0026#34;: \u0026#34;${fileDirname}\\\\${fileBasenameNoExtension}.exe\u0026#34;, //用于调试的目标程序 \u0026#34;args\u0026#34;: [], \u0026#34;stopAtEntry\u0026#34;: false, //在程序入口处停止，一般不更改 \u0026#34;cwd\u0026#34;: \u0026#34;${fileDirname}\u0026#34;, //目标的工作目录， \u0026#34;environment\u0026#34;: [], \u0026#34;externalConsole\u0026#34;: false, \u0026#34;MIMode\u0026#34;: \u0026#34;gdb\u0026#34;, //只能为gdb \u0026#34;miDebuggerPath\u0026#34;: \u0026#34;D:\\\\Program\\\\Scoop\\\\apps\\\\mingw\\\\current\\\\bin\\\\gdb.exe\u0026#34;, //gdb的路径 \u0026#34;setupCommands\u0026#34;: [ { \u0026#34;description\u0026#34;: \u0026#34;为 gdb 启用整齐打印\u0026#34;, \u0026#34;text\u0026#34;: \u0026#34;-enable-pretty-printing\u0026#34;, \u0026#34;ignoreFailures\u0026#34;: true } ], \u0026#34;preLaunchTask\u0026#34;: \u0026#34;C/C++: gcc.exe 生成活动文件\u0026#34; //在启动调试之前默认先编译，以便生成目标程序 } ] } vscode-server 隧道 创建隧道\n进入 .vscode-server 文件夹，开启隧道 1 2 cd ~/.vscode-server ./code tunnel 将隧道创建为系统服务 1 ./code tunnel service install 解决用户登出后服务终止的问题：\n执行下面命令确保用户注销后服务仍运行：\n1 sudo loginctl enable-linger $USER 或者\n修改服务配置文件（~/.config/systemd/user/code-tunnel.service），将 WantedBy=multi-user.target 改为 WantedBy=default.target，然后重新启用服务\n启动服务 1 systemctl --user start code-tunnel 或者开机自启：\n1 systemctl --user enable --now code-tunnel 查看日志 1 ./code tunnel service log 卸载服务 1 ./code tunnel service uninstall ctr+p 命令\n输入 @ 可快速浏览符号：函数、变量等 输入 : 可快速跳转到行号 输入 \u0026gt; 所有命令，等效为 ctr+shift+p 输入 # 快捷键 编辑器 ctr+d 可快速匹配一个单词，多次输入匹配同一个单词并可同时更改这几个单词 alt + 点击 可以放置多个光标 ALT+上/下 上下移动一行 ALT+Shift+上/下 复制该行 ctr + L 快速向下选中多行 终端 ctr + ←/→ 在命令的单词之间移动 技巧 符号重命名 右键→查找所用引用 重命名符号 文件路径魔法 新建文件时用/自动创建嵌套目录（如src/components/Button.tsx）\n自定义任务（Tasks） 将npm run build等命令保存为快捷任务，一键执行。\n代码片段（Snippets） 通过JSON配置快速插入常用代码模板。\n","permalink":"https://jhxs.github.io/posts/2151/","summary":"\u003ch1 id=\"配置c环境\"\u003e配置C环境\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e[!important] \u003ca href=\"https://www.cnblogs.com/duruofei/p/15674502.html\"\u003ehttps://www.cnblogs.com/duruofei/p/15674502.html\u003c/a\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch2 id=\"安装mingw\"\u003e安装Mingw\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-PowerShell\" data-lang=\"PowerShell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003escoop\u003c/span\u003e \u003cspan class=\"n\"\u003einstall\u003c/span\u003e \u003cspan class=\"n\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e/\u003c/span\u003e\u003cspan class=\"n\"\u003emingw\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"安装扩展\"\u003e安装扩展\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e安装C/C++插件,扩展\u0026ndash;\u0026gt;搜索C/C++\u0026ndash;\u0026gt;安装。还有code runner插件\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cimg alt=\"%E5%9B%BE%E7%89%87 2.png\" loading=\"lazy\" src=\"_extras/%e5%9b%be%e7%89%87-2.png\"\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e新建C源文件，并用vscode打开，点击调试→创建\u003ccode\u003elaunch.json\u003c/code\u003e文件，依次选择\u003ccode\u003eC++(GDB/LLDB)\u003c/code\u003e, 默认配置。此时会自动在当前目录下新建\u003ccode\u003e.vscode\u003c/code\u003e文件夹并生成\u003ccode\u003elauch.json\u003c/code\u003e 将其中代码更改如下将光标放在标签上可以显示此标签的意义\u003c/p\u003e","title":"VSCode"}]